class HashTable():
    def __init__(self, size = 7):
        self.data_map = [None] * size

    def __hash(self, key):
        my_hash = 0
        for letter in key:
            my_hash = (my_hash + ord(letter) *  23) % len(self.data_map)
        return my_hash

    def set_item(self, key, value):
        index = self.__hash(key)
        if self.data_map[index] == None:
            self.data_map[index] = [] 
        self.data_map[index].append([key,value])

    def print_table(self):
        for i, val in enumerate(self.data_map):
            print(i, ": ", val)       

    def get_item(self, key):
        index = self.__hash(key)
        if self.data_map[index] is not None:
            for item in self.data_map[index]:
                if item[0] == key:
                    return item[1]
        return None

    def keys(self):
        list_of_keys = []
        for item in self.data_map:
            if item is not None:
                for item2 in item:
                    list_of_keys.append(item2[0])
        return list_of_keys
            

myHash = HashTable()

print(myHash._HashTable__hash("bob"))
myHash.set_item("bob", 34)
myHash.set_item("bob", 50)
myHash.print_table()
print(myHash.get_item("bob"))
print(myHash.keys())
